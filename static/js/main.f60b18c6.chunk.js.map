{"version":3,"sources":["components/Redux/uiSlice.js","selectors/UISelectors.js","components/Forms/TimeFormMaterial.js","components/TweatherSideDrawer.js","components/TweatherHeader.js","selectors/WeatherSelectors.js","components/Charts/ModalChart.js","components/LocationModal.js","components/Redux/weatherSlice.js","components/Charts/CountryChart.js","time.js","components/TweatherTable.js","components/Charts/ComparisonChart.js","components/Charts/SingleChart.js","components/Routers/TweatherRouter.jsx","App.js","reportWebVitals.js","reducers/index.js","index.js"],"names":["uiSlice","createSlice","name","initialState","width","window","innerWidth","height","innerHeight","sideBarExtendedWidth","sideBarCollapsedWidth","sideBarWidth","sideBarOpen","headerHeight","selectedDate","selectedHour","selectedId","selectedPredicted","reducers","setWindowSize","reducer","state","action","payload","prepare","openSideBar","closeSideBar","toggleSideBar","open","resizeWindow","setDatetime","date","hour","setSelectedLocation","id","isPredicted","actions","getWindowDimensions","isSideBarOpen","getSelectedDate","getSelectedHour","getSelectedDatetime","useStyles","makeStyles","theme","text","color","WhiteTextKeyboardDatePicker","withStyles","root","KeyboardDatePicker","mapDispatch","connect","ui","minDate","Date","maxDate","classes","hours","setHours","form_date","setDate","getDate","style","display","justifyContent","utils","DateFnsUtils","disableToolbar","variant","format","margin","label","value","onChange","input","day","month","getMonth","year","getFullYear","toString","KeyboardButtonProps","className","inputProps","InputLabelProps","new_hour","getHours","views","menuButton","marginRight","drawer","flexShrink","whiteSpace","drawerOpen","transition","transitions","create","easing","sharp","duration","enteringScreen","drawerClose","leavingScreen","overflowX","spacing","breakpoints","up","toolbar","alignItems","padding","mixins","datetime","useTheme","useState","selected","setSelected","Drawer","clsx","paper","IconButton","onClick","direction","Divider","List","to","textDecoration","ListItem","button","ListItemIcon","ListItemText","primary","appBar","zIndex","appBarShift","marginLeft","title","flexGrow","AppBar","position","Toolbar","edge","hide","aria-label","Typography","isWeatherLoading","weather","loading_queue","length","isFetchingDisplay","createSelector","loadingQueue","filter","item","memoizedGetWeatherByDateAndTime","data","weatherData","Object","values","time","getSelectedDataOverTime","selectedCity","city","getSelectedCity","chartStyle","minHeight","ModalChart","type","useEffect","d3","remove","dateRange","reduce","min","datum","minTime","max","maxTime","start_date","moment","end_date","getDateRange","convertedData","wholeDayData","dateStr","replace","dateData","temp","map","predicted_weather","num_tweets","push","diff","add","getChartData","xScale","domain","d","range","xAxis","scale","tickFormat","ticks","yScale","accuracy","yAxis","svg","append","attr","call","selectAll","x","y","drawChart","backgroundColor","palette","background","locationData","setShowingModal","charts","setId","Modal","onClose","showingModal","aria-labelledby","aria-describedby","top","left","transform","textAlign","Button","prevId","weatherSlice","status","addWeatherDatum","lat","lon","setStatus","addLoadingItem","loading_item","removeLoadingItem","pop","loading","predicted","geoJson","projection","translate","pathGenerator","features","enter","properties","NAME","on","event","this","formatHour","ampm","table","tableContainer","maxHeight","props","windowDimensions","marginTop","maxWidth","header","TableContainer","component","Paper","Table","stickyHeader","TableHead","TableRow","TableCell","align","TableBody","scope","ownProps","CircularProgress","flexDirection","TweatherRouter","exact","path","render","fetchWeather","dispatch","fetch","then","response","json","forEach","weather_datum","finally","fetchCityWeather","console","log","setGeoJson","a","geojsonResponse","geojsonJsonResponse","fetchData","resized","addEventListener","clearTimeout","setTimeout","removeEventListener","CssBaseline","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","combineReducers","weatherReducer","uiReducer","store","configureStore","rootReducer","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.f60b18c6.chunk.js","sourcesContent":["import { createSlice } from '@reduxjs/toolkit'\r\n\r\nconst uiSlice = createSlice({\r\n    name: \"ui\",\r\n    initialState: { \r\n        width: window.innerWidth - 56, \r\n        height: window.innerHeight + 72,\r\n        sideBarExtendedWidth: 240,\r\n        sideBarCollapsedWidth: 56,\r\n        sideBarWidth: 56,\r\n        sideBarOpen: false,\r\n        headerHeight: 72,\r\n        selectedDate: \"4/14/2021\",\r\n        selectedHour: 5,\r\n        selectedId: null,\r\n        selectedPredicted: false,\r\n    },\r\n    reducers: {\r\n        setWindowSize: {\r\n            reducer(state, action) {\r\n                const {\r\n                    height,\r\n                    width\r\n                } = action.payload;\r\n\r\n                state['width'] = width;\r\n                state['height'] = height;\r\n            },\r\n            prepare(height, width){\r\n                return {\r\n                    payload: { height, width }\r\n                }\r\n            }\r\n        },\r\n        openSideBar: {\r\n            reducer(state, action) {\r\n                state['sideBarOpen'] = true;\r\n                state['width'] = window.innerWidth - state.sideBarExtendedWidth;\r\n                state['sideBarWidth'] = state['sideBarExtendedWidth']\r\n            }\r\n        },\r\n        closeSideBar: {\r\n            reducer(state, action){\r\n                state['sideBarOpen'] = false;\r\n                state['width'] = window.innerWidth - state.sideBarCollapsedWidth;\r\n                state['sideBarWidth'] = state['sideBarCollapsedWidth']\r\n            }\r\n        },\r\n        toggleSideBar: {\r\n            reducer(state, action) {\r\n                const open = state['sideBarOpen'];\r\n                state['width'] = open ? state['width'] = window.innerWidth - state.sideBarCollapsedWidth\r\n                                    : state['width'] = window.innerWidth - state.sideBarExtendedWidth\r\n                state['sideBarWidth'] = open ? state.sideBarCollapsedWidth : state.sideBarExtendedWidth\r\n                state['sideBarOpen'] = !open\r\n            }\r\n        },\r\n        resizeWindow: {\r\n            reducer(state, action){\r\n                if (state.sideBarOpen) { state['width'] = window.innerWidth - state.sideBarExtendedWidth }\r\n                else { state['width'] = window.innerWidth - state.sideBarWidth }\r\n            }\r\n        },\r\n        setDatetime: {\r\n            reducer(state, action) {\r\n                const {\r\n                    date,\r\n                    hour\r\n                } = action.payload;\r\n\r\n                state['selectedDate'] = date;\r\n                state['selectedHour'] = hour\r\n            },\r\n            prepare(date, hour) {\r\n                return {\r\n                    payload: {date, hour}\r\n                }\r\n            }\r\n        },\r\n        setSelectedLocation: {\r\n            reducer(state, action) {\r\n                const {\r\n                    id,\r\n                    isPredicted\r\n                } = action.payload;\r\n\r\n                state['selectedId'] = id;\r\n                state['selectedPredicted'] = isPredicted\r\n            },\r\n            prepare(id, isPredicted) {\r\n                return {\r\n                    payload: { id, isPredicted }\r\n                };\r\n            }\r\n        },\r\n    }\r\n})\r\n\r\nexport const {\r\n    setWindowSize,\r\n    openSideBar,\r\n    closeSideBar,\r\n    toggleSideBar,\r\n    resizeWindow,\r\n    setDatetime,\r\n    setSelectedLocation\r\n} = uiSlice.actions;\r\n\r\nexport default uiSlice.reducer;","export const getWindowDimensions = (state) => {\r\n    return {\r\n            height: state['height'], \r\n            width: state['width'],  \r\n            sideBarWidth: state['sideBarWidth'],\r\n            headerHeight: state['headerHeight']\r\n        }\r\n}\r\n\r\nexport const isSideBarOpen = (state) => {\r\n    return state.sideBarOpen\r\n}\r\n\r\nexport const getSelectedDate = (state) => {\r\n    return state.selectedDate\r\n}\r\n\r\nexport const getSelectedHour = (state) => {\r\n    return state.selectedHour\r\n}\r\n\r\nexport const getSelectedDateFromState = (state) => {\r\n    return state.ui.selectedDate\r\n}\r\n\r\nexport const getSelectedHourFromState = (state) => {\r\n    return state.ui.selectedHour\r\n}\r\n\r\nexport const getSelectedDatetime = (state) => {\r\n    return {date: state.selectedDate, hour: state.selectedHour}\r\n}","import React, { useState } from 'react';\r\nimport 'date-fns';\r\nimport DateFnsUtils from '@date-io/date-fns';\r\nimport {\r\n    MuiPickersUtilsProvider,\r\n    KeyboardTimePicker,\r\n    KeyboardDatePicker,\r\n  } from '@material-ui/pickers';\r\nimport { makeStyles, withStyles } from '@material-ui/core/styles';\r\nimport { connect } from \"react-redux\";\r\nimport { setDatetime } from '../Redux/uiSlice';\r\nimport { getSelectedDatetime, getSelectedDate, getSelectedHour } from '../../selectors/UISelectors';\r\n\r\n  const useStyles = makeStyles((theme) => ({\r\n    text: {\r\n        color: \"white\"\r\n    }\r\n  }));\r\n\r\n  const WhiteTextKeyboardDatePicker = withStyles({\r\n    root: {\r\n      color: \"#FFFFFF\"\r\n    }\r\n  })(KeyboardDatePicker);\r\n\r\nconst TimeFormMaterial = ({ hour, date, setDatetime }) => {\r\n    let minDate = new Date('2021-04-12')\r\n    let maxDate = new Date('2021-04-17')\r\n    const classes = useStyles();\r\n\r\n    let hours = new Date(date)\r\n    hours.setHours(hour)\r\n\r\n    let form_date = new Date(date)\r\n    form_date.setDate(form_date.getDate())\r\n\r\n    const handleDateChange = (input) => {\r\n        const day = input.getDate()\r\n        const month = input.getMonth() + 1\r\n        const year = input.getFullYear()\r\n\r\n        let date = ''\r\n        date += month.toString() + '/'\r\n        if (day < 10) date += '0'\r\n        date += day.toString() + '/'\r\n        date += year.toString()\r\n\r\n        setDatetime(date, hour)\r\n    }\r\n\r\n    const handleTimeChange = (input) => {\r\n        const new_hour = input.getHours()\r\n        setDatetime(date, new_hour)\r\n    }\r\n\r\n    return (\r\n        <div style={{display: 'flex', justifyContent: 'flex-end'}}>\r\n            <MuiPickersUtilsProvider utils={DateFnsUtils}>\r\n                <WhiteTextKeyboardDatePicker\r\n                    disableToolbar\r\n                    variant=\"inline\"\r\n                    format=\"MM/dd/yyyy\"\r\n                    margin=\"normal\"\r\n                    id=\"date-picker-inline\"\r\n                    label=\"Select date\"\r\n                    minDate={minDate}\r\n                    maxDate={maxDate}\r\n                    value={form_date}\r\n                    onChange={handleDateChange}\r\n                    KeyboardButtonProps={{\r\n                        'aria-label': 'change date',\r\n                        className: classes.text\r\n                    }}\r\n                    inputProps={{ className: classes.text }}\r\n                    InputLabelProps={{ className: classes.text }}\r\n                />\r\n                <KeyboardTimePicker\r\n                    margin=\"normal\"\r\n                    id=\"time-picker\"\r\n                    variant=\"inline\"\r\n                    label=\"Select time\"\r\n                    value={hours}\r\n                    onChange={handleTimeChange}\r\n                    views={['hours']}\r\n                    KeyboardButtonProps={{\r\n                        'aria-label': 'change time',\r\n                        className: classes.text\r\n                    }}\r\n                    inputProps={{ className: classes.text }}\r\n                    InputLabelProps={{ className: classes.text }}\r\n                />\r\n            </MuiPickersUtilsProvider>\r\n        </div>\r\n    )\r\n}\r\n\r\nconst mapStateToProps = (state) => ({\r\n    hour: getSelectedHour(state.ui),\r\n    date: getSelectedDate(state.ui),\r\n})\r\n\r\nconst mapDispatch = { setDatetime }\r\n\r\nexport default connect(mapStateToProps, mapDispatch)(TimeFormMaterial);","import React, { useState } from 'react';\r\nimport clsx from 'clsx';\r\nimport { makeStyles, useTheme } from '@material-ui/core/styles';\r\nimport Drawer from '@material-ui/core/Drawer';\r\nimport List from '@material-ui/core/List';\r\nimport Divider from '@material-ui/core/Divider';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport ChevronLeftIcon from '@material-ui/icons/ChevronLeft';\r\nimport ChevronRightIcon from '@material-ui/icons/ChevronRight';\r\nimport ListItem from '@material-ui/core/ListItem';\r\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\r\nimport ListItemText from '@material-ui/core/ListItemText';\r\nimport CompareArrowsIcon from '@material-ui/icons/CompareArrows';\r\nimport WbSunnyIcon from '@material-ui/icons/WbSunny';\r\nimport CloudIcon from '@material-ui/icons/Cloud';\r\nimport { Link } from \"react-router-dom\";\r\nimport { connect } from \"react-redux\";\r\nimport { getSelectedDatetime, isSideBarOpen } from \"../selectors/UISelectors\";\r\nimport { closeSideBar } from './Redux/uiSlice';\r\n\r\nconst drawerWidth = 240;\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    display: 'flex',\r\n  },\r\n  menuButton: {\r\n    marginRight: 36,\r\n  },\r\n  drawer: {\r\n    width: drawerWidth,\r\n    flexShrink: 0,\r\n    whiteSpace: 'nowrap',\r\n  },\r\n  drawerOpen: {\r\n    width: drawerWidth,\r\n    transition: theme.transitions.create('width', {\r\n      easing: theme.transitions.easing.sharp,\r\n      duration: theme.transitions.duration.enteringScreen,\r\n    }),\r\n  },\r\n  drawerClose: {\r\n    transition: theme.transitions.create('width', {\r\n      easing: theme.transitions.easing.sharp,\r\n      duration: theme.transitions.duration.leavingScreen,\r\n    }),\r\n    overflowX: 'hidden',\r\n    width: theme.spacing(7) + 1,\r\n    [theme.breakpoints.up('sm')]: {\r\n      width: theme.spacing(9) + 1,\r\n    },\r\n  },\r\n  toolbar: {\r\n    display: 'flex',\r\n    alignItems: 'center',\r\n    justifyContent: 'flex-end',\r\n    padding: theme.spacing(0, 1),\r\n    height: '72px',\r\n    ...theme.mixins.toolbar,\r\n  },\r\n}));\r\n\r\nconst TweatherSideDrawer = ({ datetime, open, closeSideBar }) => {\r\n  const classes = useStyles();\r\n  const theme = useTheme();\r\n  const [selected, setSelected] = useState(null);\r\n\r\n  return (\r\n    <div className={classes.root}>\r\n      <Drawer\r\n        variant=\"permanent\"\r\n        className={clsx(classes.drawer, {\r\n          [classes.drawerOpen]: open,\r\n          [classes.drawerClose]: !open,\r\n        })}\r\n        classes={{\r\n          paper: clsx({\r\n            [classes.drawerOpen]: open,\r\n            [classes.drawerClose]: !open,\r\n          }),\r\n        }}\r\n      >\r\n        <div className={classes.toolbar}>\r\n          <IconButton onClick={closeSideBar}>\r\n            {theme.direction === 'rtl' ? <ChevronRightIcon /> : <ChevronLeftIcon />}\r\n          </IconButton>\r\n        </div>\r\n        <Divider />\r\n        <List>\r\n            <Link to={\"/weather/predictions/\"} style={{ textDecoration: 'none', color: 'black' }}>\r\n              <ListItem button key={'View Predictions'} selected={selected === 'prediction'} onClick={() => { setSelected('prediction')}}>\r\n                <ListItemIcon>\r\n                    <WbSunnyIcon />\r\n                  </ListItemIcon>\r\n                <ListItemText primary={'View Predictions'} />\r\n              </ListItem>\r\n            </Link>\r\n            <Link to={\"/weather/actual/\"} style={{ textDecoration: 'none', color: 'black' }}>\r\n              <ListItem button key={'View Actual'} selected={selected === 'actual'} onClick={() => { setSelected('actual') }}>\r\n                <ListItemIcon>\r\n                    <CloudIcon />\r\n                  </ListItemIcon>\r\n                <ListItemText primary={'View Actual'} />\r\n              </ListItem>\r\n            </Link>\r\n            <Link to={\"/weather/comparison/\"} style={{ textDecoration: 'none', color: 'black' }}>\r\n              <ListItem button key={'View Comparison'} selected={selected === 'comparison'} onClick={() => { setSelected('comparison') }}>\r\n                <ListItemIcon>\r\n                    <CompareArrowsIcon />\r\n                  </ListItemIcon>\r\n                <ListItemText primary={'View Comparison'} />\r\n              </ListItem>\r\n            </Link>\r\n        </List>\r\n      </Drawer>\r\n    </div>\r\n  );\r\n}\r\n\r\nconst mapStateToProps = (state) => ({\r\n  datetime: getSelectedDatetime(state.ui),\r\n  open: isSideBarOpen(state.ui),\r\n})\r\n\r\nconst mapDispatch = { closeSideBar }\r\n\r\nexport default connect(mapStateToProps, mapDispatch)(TweatherSideDrawer);","import React, { useState } from 'react';\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport clsx from 'clsx';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport { makeStyles  } from '@material-ui/core/styles';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport MenuIcon from '@material-ui/icons/Menu';\r\nimport { connect } from \"react-redux\";\r\nimport { toggleSideBar } from './Redux/uiSlice';\r\nimport { isSideBarOpen } from '../selectors/UISelectors';\r\nimport TimeFormMaterial from './Forms/TimeFormMaterial';\r\nimport TweatherSideDrawer from './TweatherSideDrawer'\r\n\r\nconst drawerWidth = 240;\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n        display: 'flex',\r\n      },\r\n      appBar: {\r\n        zIndex: theme.zIndex.drawer + 1,\r\n        transition: theme.transitions.create(['width', 'margin'], {\r\n          easing: theme.transitions.easing.sharp,\r\n          duration: theme.transitions.duration.leavingScreen,\r\n        }),\r\n      },\r\n      appBarShift: {\r\n        marginLeft: drawerWidth,\r\n        width: `calc(100% - ${drawerWidth}px)`,\r\n        transition: theme.transitions.create(['width', 'margin'], {\r\n          easing: theme.transitions.easing.sharp,\r\n          duration: theme.transitions.duration.enteringScreen,\r\n        }),\r\n      },\r\n      menuButton: {\r\n        marginRight: 36,\r\n      },\r\n    title: {\r\n      flexGrow: 1,\r\n    },\r\n    text: {\r\n        color: \"white\"\r\n    }\r\n  }));\r\n\r\nconst TweatherHeader = ({ open, toggleSideBar }) => {\r\n    const classes = useStyles();\r\n\r\n    const handleClick = () => {\r\n      toggleSideBar();\r\n    }\r\n\r\n    return (\r\n        <div className={classes.root}>\r\n            <AppBar position=\"fixed\" \r\n                color=\"primary\" \r\n                className={clsx(classes.appBar, {\r\n                [classes.appBarShift]: open,\r\n            })}>\r\n                <Toolbar>\r\n                    <IconButton \r\n                        onClick={handleClick} \r\n                        edge=\"start\" \r\n                        className={clsx(classes.menuButton, {\r\n                            [classes.hide]: open,\r\n                        })} \r\n                        color=\"inherit\" \r\n                        aria-label=\"menu\">\r\n                            <MenuIcon />\r\n                    </IconButton>\r\n                    <Typography variant=\"h6\" className={classes.title}>\r\n                        Tweather\r\n                    </Typography>\r\n                    <TimeFormMaterial/>\r\n                </Toolbar>\r\n            </AppBar>\r\n            <TweatherSideDrawer/>\r\n        </div>\r\n    )\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n  open: isSideBarOpen(state.ui)\r\n})\r\n\r\nconst mapDispatch = { toggleSideBar }\r\n\r\nexport default connect(mapStateToProps, mapDispatch)(TweatherHeader);","import { createSelector } from '@reduxjs/toolkit'\r\nimport { create } from 'd3-selection'\r\nimport memoize from 'lodash.memoize';\r\nimport { getSelectedDateFromState, getSelectedHourFromState } from './UISelectors';\r\n\r\nexport const getWeatherFromState = state => {\r\n    return state.weather.data\r\n}\r\n\r\nexport const getWeatherData = state => {\r\n    return state.data\r\n}\r\n\r\nexport const getWeatherByDate = (state, date) => {\r\n    return Object.values(state).filter(item => item.date === date)\r\n}\r\n\r\nexport const getWeatherByDateAndHour = (state, date, hour) => {\r\n    return state.filter(item => item.date === date && item.hour === hour)\r\n}\r\n\r\nexport const getWeatherByLocation = (state, lat, lon) => {\r\n    return state.filter(item => item.lat === lat && item.lon === lon)\r\n}\r\n\r\nexport const getWeatherByLocationDateTime = (state, lat, lon, date, hour) => {\r\n    return state.filter(item => item.lat === lat && item.lon === lon && item.date === date && item.hour === hour)\r\n}\r\n\r\nexport const getSelectedLocation = (state) => {\r\n    return state.selected\r\n}\r\n\r\nexport const getSelectedLocationFromState = (state) => {\r\n    return state.weather.selected\r\n}\r\n\r\nexport const getSelectedLocationCity = (state) => {\r\n    return state.weather.data[state.weather.selected.id].city\r\n}\r\n\r\nexport const getWeatherById = (state, id) => {\r\n    return state.data[id]\r\n}\r\n\r\nexport const getWeatherStatus = (state) => {\r\n    return state.status\r\n}\r\n\r\nexport const isWeatherLoading = (state) => {\r\n    return state.weather.loading_queue.length > 0\r\n}\r\n\r\nexport const getLoadingQueue = (state) => {\r\n    return state.weather.loading_queue\r\n}\r\n\r\nexport const isFetchingDisplay = createSelector(\r\n    [getLoadingQueue],\r\n    (loadingQueue) => {\r\n        return loadingQueue.filter(item => item === 'fetching chart data').length > 0\r\n    }\r\n)\r\n\r\n\r\nexport const getSelectedLocationForModal = (state) => {\r\n    const selected = state.selected;\r\n    return { predicted: selected.isPredicted, data: getWeatherById(state, selected.id) }\r\n}\r\n\r\nexport const memoizedGetWeatherByDate = createSelector(\r\n    [getWeatherData, (state, date) => date],\r\n    (weatherData, date) => { \r\n        return Object.values(weatherData).filter(item => item.date === date) \r\n    }\r\n);\r\n\r\nexport const memoizedGetWeatherByDateAndTime = createSelector(\r\n    [getWeatherFromState, getSelectedDateFromState, getSelectedHourFromState],\r\n    (weatherData, date, time) => { \r\n        return Object.values(weatherData).filter(item => item.date === date).filter(item => item.hour === time)\r\n    }\r\n);\r\n\r\nexport const getSelectedDataOverTime = (state) => {\r\n    if (state.ui.selectedId) {\r\n        let selectedCity = Object.values(state.weather.data).filter(item => item.id === state.ui.selectedId)[0]['city']\r\n        return Object.values(state.weather.data).filter(item => item.city === selectedCity)\r\n    }\r\n    else\r\n        return []\r\n}\r\n\r\nexport const getSelectedCity = (state) => {\r\n    if (state.ui.selectedId) {\r\n        return Object.values(state.weather.data).filter(item => item.id === state.ui.selectedId)[0]['city']\r\n    }\r\n    else\r\n        return \"\"\r\n}","import React, { useEffect } from 'react';\r\nimport * as d3 from 'd3';\r\nimport * as moment from 'moment'\r\n\r\nconst chartStyle = {\r\n    display: 'flex',\r\n    justifyContent: 'center',\r\n    alignItems: 'center',\r\n    height: '100%',\r\n    width: '100%',\r\n    padding: 0,\r\n    margin: 0,\r\n    minHeight: '100%'\r\n  }\r\n\r\nconst mapDate = (data) => {\r\n    let res = JSON.parse(JSON.stringify(data));\r\n    res.forEach(datum => {\r\n        let date = moment(datum['date'])\r\n        date.hour(datum['hour'])\r\n        datum['datetime'] = date.valueOf()\r\n    })\r\n    return res\r\n}\r\n\r\nconst getDateRange = (data) => {\r\n    let minDate = data.reduce((min, datum) => datum.date < min ? datum.date : min, data[0].date);\r\n    let minTime = data.reduce((min, datum) => datum.hour < min ? datum.hour : min, data[0].hour);\r\n    let maxDate = data.reduce((max, datum) => datum.date > max ? datum.date : max, data[0].date);\r\n    let maxTime = data.reduce((max, datum) => datum.hour > max ? datum.hour : max, data[0].hour);\r\n\r\n    let start_date = moment(minDate);\r\n    start_date.hour(minTime);\r\n    let end_date = moment(maxDate);\r\n    end_date.hour(maxTime)\r\n\r\n    return [start_date, end_date]\r\n}\r\n\r\nconst getChartData = (start_date, end_date, data) => {\r\n    const wholeDayData = []\r\n    for (let date = moment(start_date); date.diff(end_date, 'days') <= 0; date.add(1, 'days')){\r\n        let dateStr = date.format('MM/DD/YYYY').replace(/^0+/, \"\")\r\n        let dateData = Object.values(data).filter(item => item.date === dateStr)\r\n        let temp = {'accuracy': 0, 'num_tweets': 0, 'num_data_points': dateData.length}\r\n        dateData.map(datum => {\r\n            if (datum.weather === datum.predicted_weather){\r\n                temp['accuracy'] += 1\r\n            }\r\n            temp['num_tweets'] += datum.num_tweets\r\n        })\r\n        if (dateData.length > 0) {\r\n            temp['city'] = dateData[0]['city']\r\n            temp['date'] = moment(date)\r\n        }\r\n        temp['accuracy'] = temp['accuracy'] / temp['num_data_points']\r\n        wholeDayData.push(temp)\r\n    }\r\n    return wholeDayData\r\n}\r\n\r\nconst mapAccuracy = (data) => {\r\n    let res = JSON.parse(JSON.stringify(data));\r\n    res.forEach(datum => {\r\n        datum['accuracy'] = datum[datum['predicted_weather'].toLowerCase()]\r\n    })\r\n    return res\r\n}\r\n\r\nconst getAccuracyRange = (data) => {\r\n    let minAcc = data.reduce((min, datum) => datum.accuracy < min ? datum.accuracy : min, data[0].accuracy);\r\n    let maxAcc = data.reduce((max, datum) => datum.accuracy > max ? datum.accuracy : max, data[0].accuracy);\r\n\r\n    return [minAcc, maxAcc]\r\n}\r\n\r\nconst ModalChart = ({ type, data }) => {\r\n    useEffect(() => {\r\n        const drawChart = () => {\r\n            d3.selectAll(\"#modalChartSvg\").remove();\r\n\r\n            let margin = {top: 10, right: 80, bottom: 60, left: 60}\r\n\r\n            let width = window.innerWidth > 600 ? 600 - margin.left - margin.right : window.innerWidth - margin.left - margin.right;\r\n            let height = (window.innerHeight / 2) - margin.top - margin.bottom;\r\n\r\n            let dateRange = getDateRange(data)\r\n            let convertedData = getChartData(dateRange[0], dateRange[1], data)\r\n\r\n            let xScale = d3.scaleTime()\r\n                            .domain(d3.extent(convertedData, function(d) { return d.date; }))\r\n                            .range([0, width])\r\n\r\n            let xAxis = d3.axisBottom()\r\n                            .scale(xScale)\r\n                            .tickFormat(d3.timeFormat(\"%a\"))\r\n                            .ticks(5);\r\n            \r\n            if (type === 'Model Accuracy') {\r\n                var yScale = d3.scaleLinear().domain([0, d3.max(convertedData, function(d) { return d.accuracy })]).range([height, 0]);\r\n                var yAxis = d3.axisLeft()\r\n                            .scale(yScale)\r\n                            .tickFormat(d3.format(\".0%\"))\r\n                            .ticks(10);\r\n            }\r\n            else if (type === 'Number of Tweets') {\r\n                var yScale = d3.scaleLinear().domain([0, d3.max(convertedData, function(d) { return d.num_tweets })]).range([height, 0]);\r\n                var yAxis = d3.axisLeft()\r\n                            .scale(yScale)\r\n                            .ticks(10);\r\n            }\r\n\r\n            let svg = d3.select('#modalChart')\r\n                        .append('svg')\r\n                        .attr('id', 'modalChartSvg')\r\n                        .attr('width', width + margin.left, + margin.right)\r\n                        .attr('height', height + margin.top + margin.bottom)\r\n                        .append('g')\r\n                        .attr('transform', 'translate(' + margin.left + \",\" + margin.top + \")\")\r\n\r\n            svg.append('g')\r\n                .call(yAxis)\r\n\r\n            svg.append('g')\r\n                .attr(\"transform\", \"translate(0,\" + height + \")\")\r\n                .call(xAxis)\r\n                .selectAll(\"text\")\t\r\n                .style(\"text-anchor\", \"end\")\r\n                .attr(\"dx\", \"-.8em\")\r\n                .attr(\"dy\", \"-.45em\")\r\n                .attr(\"transform\", \"rotate(-65)\");\r\n            \r\n            svg.append('path')\r\n                .datum(convertedData)\r\n                .attr('fill','none')\r\n                .attr('stroke', 'steelblue')\r\n                .attr('stroke-width', 1.5)\r\n                .attr('d', d3.line()\r\n                            .x(function(d) { return xScale(d.date) })\r\n                            .y(function(d) { \r\n                                if (type === 'Model Accuracy') {\r\n                                    return yScale(d.accuracy)\r\n                                }\r\n                                else if (type === 'Number of Tweets') {\r\n                                    return yScale(d.num_tweets)\r\n                                }\r\n                            })\r\n                )\r\n            \r\n            if (type === 'Model Accuracy') {\r\n                svg.append(\"text\")\r\n                .attr(\"transform\", \"rotate(-90)\")\r\n                .attr(\"y\", 0 - margin.left)\r\n                .attr(\"x\",0 - (height / 2))\r\n                .attr(\"dy\", \"1em\")\r\n                .style(\"text-anchor\", \"middle\")\r\n                .text(\"Model Accuracy\"); \r\n            }\r\n            else if (type === 'Number of Tweets') {\r\n                svg.append(\"text\")\r\n                .attr(\"transform\", \"rotate(-90)\")\r\n                .attr(\"y\", 0 - margin.left)\r\n                .attr(\"x\",0 - (height / 2))\r\n                .attr(\"dy\", \"1em\")\r\n                .style(\"text-anchor\", \"middle\")\r\n                .text(\"Number of Tweets\"); \r\n            }\r\n        }\r\n        drawChart();\r\n        return () => d3.selectAll('#modalChartSvg').remove();\r\n    }, [type, data])\r\n\r\n    return (\r\n        <div>\r\n            <div id={'modalChart'} style={chartStyle}>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ModalChart;","import React, { useState } from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Modal from '@material-ui/core/Modal';\r\nimport Button from '@material-ui/core/Button';\r\nimport { connect } from \"react-redux\";\r\nimport { getSelectedDataOverTime } from \"../selectors/WeatherSelectors\";\r\nimport ModalChart from \"./Charts/ModalChart\"\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    paper: {\r\n      position: 'absolute',\r\n      width: window.innerWidth > 600 ? 600 : window.innerWidth,\r\n      backgroundColor: theme.palette.background.paper,\r\n      padding: theme.spacing(2, 4, 3),\r\n    },\r\n  }));\r\n\r\nconst LocationModal = ({ locationData, open, setShowingModal }) => {\r\n    const [charts, setCharts] = useState(['Model Accuracy', 'Number of Tweets'])\r\n    const [id, setId] = useState(0)\r\n    const classes = useStyles();\r\n\r\n    const handleClose = () => {\r\n      setShowingModal(showingModal => !showingModal)\r\n    };\r\n\r\n    const handleNext = () => {\r\n      if (id+1 < charts.length) setId(prevId => prevId + 1)\r\n      else setId(0)\r\n    }\r\n\r\n    const handlePrevious = () => {\r\n      if (id-1 >= 0) setId(prevId => prevId - 1)\r\n      else setId(charts.length - 1)\r\n    }\r\n\r\n    if (typeof locationData !== 'undefined')\r\n      return (\r\n        <div>\r\n          <Modal\r\n            open={open}\r\n            onClose={handleClose}\r\n            aria-labelledby=\"simple-modal-title\"\r\n            aria-describedby=\"simple-modal-description\"\r\n          >\r\n            <div style={{top: '50%', left: '50%', transform: `translate(-50%, -50%)`}} className={classes.paper}>\r\n                <h2 style={{display: 'flex', justifyContent: 'center'}} id=\"simple-modal-title\">Analysis of {locationData[0]?.city} Data</h2>\r\n                <p style={{display: 'flex', justifyContent: 'center', textAlign: 'center'}}>\r\n                  <Button color=\"primary\" style={{padding: 0, marginRight: 12}} onClick={handlePrevious}>previous</Button>\r\n                  {charts[id]} over Time\r\n                  <Button color=\"primary\" style={{padding: 0}} onClick={handleNext}>Next</Button> </p>\r\n                <ModalChart type={charts[id]} data={locationData}/>\r\n                <p style={{display: 'flex', justifyContent: 'center'}}>Day</p>\r\n            </div>\r\n          </Modal>\r\n        </div>\r\n      );\r\n      else return null\r\n}\r\n\r\nconst mapStateToProps = (state) => ({\r\n  locationData: getSelectedDataOverTime(state)\r\n})\r\n\r\nexport default connect(mapStateToProps, null)(LocationModal);","import { createSlice } from '@reduxjs/toolkit'\r\n\r\nconst weatherSlice = createSlice({\r\n    name: \"weather\",\r\n    initialState: { \r\n        selected: {},\r\n        data: {},\r\n        status: 'idle',\r\n        loading_queue: []\r\n    },\r\n    reducers: {\r\n        addWeatherDatum: {\r\n            reducer(state, action) {\r\n                const {\r\n                    id,\r\n                    city,\r\n                    date,\r\n                    lat,\r\n                    lon,\r\n                    hour,\r\n                    num_tweets,\r\n                    weather,\r\n                    predicted_weather,\r\n                } = action.payload;\r\n\r\n                state.data[id] = { id, city, date, lat, lon, hour, num_tweets, weather, predicted_weather };\r\n            },\r\n            prepare(id, city, date, lat, lon, hour, num_tweets, weather, predicted_weather) {\r\n                return {\r\n                    payload: { id, city, date, lat, lon, hour, num_tweets, weather, predicted_weather }\r\n                };\r\n            }\r\n        },\r\n        setStatus: {\r\n            reducer(state, action) {\r\n                const {\r\n                    status\r\n                } = action.payload;\r\n                state['status'] = status\r\n            },\r\n            prepare(status) {\r\n                return {\r\n                    payload: { status }\r\n                }\r\n            }\r\n        },\r\n        addLoadingItem: {\r\n            reducer(state, action) {\r\n                const {\r\n                    loading_item\r\n                } = action.payload;\r\n                state['loading_queue'].push(loading_item)\r\n            },\r\n            prepare(loading_item) {\r\n                return {\r\n                    payload: { loading_item }\r\n                }\r\n            }\r\n        },\r\n        removeLoadingItem: {\r\n            reducer(state, action) {\r\n                state['loading_queue'].pop()\r\n            }\r\n        }\r\n    },\r\n\r\n});\r\n\r\nexport const {\r\n    addWeatherDatum,\r\n    setStatus,\r\n    addLoadingItem,\r\n    removeLoadingItem\r\n} = weatherSlice.actions;\r\n\r\nexport default weatherSlice.reducer;\r\n\r\nexport const fetchWeather = (date, hour) => dispatch => {\r\n    dispatch(setStatus('loading'))\r\n    dispatch(addLoadingItem('fetching chart data'))\r\n    fetch('https://tweather-api.herokuapp.com/datetime?date=' + date +'&hour=' + hour)\r\n        .then(response => response.json())\r\n        .then(data => data.forEach(weather_datum => {\r\n                dispatch(\r\n                    addWeatherDatum(\r\n                        weather_datum.id,\r\n                        weather_datum.city,\r\n                        weather_datum.date,\r\n                        weather_datum.lat,\r\n                        weather_datum.lon,\r\n                        weather_datum.hour,\r\n                        weather_datum.num_tweets,\r\n                        weather_datum.weather,\r\n                        weather_datum.predicted_weather,\r\n                    )\r\n                )   \r\n            \r\n        }))\r\n        .finally(() => {\r\n            dispatch(setStatus('idle'))\r\n            dispatch(removeLoadingItem())\r\n        })\r\n}\r\n\r\nexport const fetchCityWeather = (city) => dispatch => {\r\n    console.log(city)\r\n    dispatch(setStatus('loading'))\r\n    dispatch(addLoadingItem(\"fetching city weather\"))\r\n    fetch('https://tweather-api.herokuapp.com/city/' + city)\r\n    .then(response => response.json())\r\n    .then(data => data.forEach(weather_datum => {\r\n            dispatch(\r\n                addWeatherDatum(\r\n                    weather_datum.id,\r\n                    weather_datum.city,\r\n                    weather_datum.date,\r\n                    weather_datum.lat,\r\n                    weather_datum.lon,\r\n                    weather_datum.hour,\r\n                    weather_datum.num_tweets,\r\n                    weather_datum.weather,\r\n                    weather_datum.predicted_weather,\r\n                )\r\n            )   \r\n        \r\n    }))\r\n    .finally(() => {\r\n        dispatch(setStatus('idle'))\r\n        dispatch(removeLoadingItem())\r\n    })\r\n}","import React, { useEffect } from 'react';\r\nimport * as d3 from 'd3';\r\nimport { connect } from \"react-redux\";\r\nimport { isWeatherLoading } from \"../../selectors/WeatherSelectors\";\r\nimport CircularProgress from '@material-ui/core/CircularProgress';\r\n\r\nconst chartStyle = {\r\n    display: 'flex',\r\n    justifyContent: 'center',\r\n    alignItems: 'center',\r\n    height: '100%',\r\n    width: '100%',\r\n    padding: 0,\r\n    margin: 0,\r\n    minHeight: '100%'\r\n  }\r\n\r\nconst CountryChart = ({ loading, height, width, predicted, weatherData, geoJson, setSelectedLocation, setShowingModal }) => {\r\n    useEffect(() => {\r\n        const weather = {\r\n            'Clear': \"\\uf185\",\r\n            'Clouds': \"\\uf6c4\",\r\n            'Drizzle': \"\\uf73d\",\r\n            'Haze': \"\\uf75f\",\r\n            'Mist': \"\\uf773\",\r\n            'Rain': \"\\uf740\",\r\n            'Snow': \"\\uf2dc\"\r\n        }\r\n    \r\n        const drawChart = () => {\r\n            d3.selectAll(\"#svg\" + predicted.toString()).remove();\r\n\r\n    \r\n            let svg = d3.select('#graph' + predicted.toString())\r\n                        .append('svg')\r\n                        .attr('id', 'svg' + predicted.toString())\r\n                        .attr('width', width)\r\n                        .attr('height', height)\r\n\r\n                svg.append(\"text\")\r\n                        .attr(\"x\", (width / 2))             \r\n                        .attr(\"y\", 100 - (30))\r\n                        .attr(\"text-anchor\", \"middle\")  \r\n                        .style(\"font-size\", \"16px\") \r\n                        .style(\"text-decoration\", \"underline\")  \r\n                        .text(predicted ? \"Predicted Weather\" : \"Actual Weather\");\r\n            \r\n            let projection = d3.geoAlbersUsa()\r\n                                .scale(width)\r\n                                .translate([width/2, height/2]);\r\n           \r\n            let pathGenerator = d3.geoPath().projection(projection);\r\n    \r\n            svg.selectAll('path')\r\n                .data(geoJson.features)\r\n                .enter()\r\n                .append('path')\r\n                .attr('d', pathGenerator)\r\n                .attr('stroke', 'white')\r\n                .attr('fill', function(d) {\r\n                    if (d.properties.NAME === 'California') {\r\n                        return 'grey'\r\n                    }\r\n                    else {\r\n                        return 'grey'\r\n                    }\r\n                })\r\n                .attr('class', function(d){\r\n                    return d.properties.name\r\n                })\r\n    \r\n            let nodes = svg.selectAll(\"g\")\r\n                           .data(weatherData)\r\n\r\n            let g = nodes.enter()\r\n                        .append(\"g\")\r\n                        .attr(\"transform\", function(d) {\r\n                            return \"translate(\" + projection([d.lon, d.lat]) + \")\" ;\r\n                        })\r\n                \r\n            g.append('text')\r\n                .attr('text-anchor', 'middle')\r\n                .attr('dominant-baseline', 'central')\r\n                .attr('font-family', \"'Font Awesome 5 Free'\")\r\n                .attr('font-size', '12px')\r\n                .attr('class', \"fas fa-cloud-showers-heavy\")\r\n                .attr('fill', function(d) {\r\n                    return d.weather === d.predicted_weather ? 'white' : 'red'\r\n                })\r\n                .attr('stroke', 'black')\r\n                .on(\"click\", function(event, d) {\r\n                    setSelectedLocation(d.id, predicted);\r\n                    setShowingModal(showingModal => !showingModal);\r\n                })\r\n                .on(\"mouseover\", function (d) {\r\n                    d3.select(this).attr(\"font-size\", 18);\r\n                    d3.select(this).style(\"cursor\", \"pointer\");\r\n                  })\r\n                .on(\"mouseout\", function (d) {\r\n                    d3.select(this).attr(\"font-size\", 12);\r\n                    d3.select(this).style(\"cursor\", \"default\");\r\n                })\r\n                .text(function(d) { \r\n                    return predicted ? weather[d.predicted_weather] : weather[d.weather]\r\n                })\r\n        }\r\n        drawChart();\r\n        return () => d3.selectAll(\"#svg\" + predicted.toString()).remove();\r\n    }, [loading, height, width, predicted, geoJson, weatherData, setSelectedLocation, setShowingModal])\r\n\r\n    return (\r\n        <div>\r\n            <div id={'graph' + predicted.toString()} style={chartStyle}>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nconst mapStateToProps = (state) => ({\r\n    loading: isWeatherLoading(state),\r\n})\r\n\r\nexport default connect(mapStateToProps, null)(CountryChart);","export const formatHour = (hour) => {\r\n    let ampm = hour >= 12 ? 'pm' : 'am';\r\n    hour = hour % 12\r\n    hour = hour ? hour : 12\r\n    return hour + ampm\r\n}\r\n\r\nexport default formatHour;","import React from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Table from '@material-ui/core/Table';\r\nimport TableBody from '@material-ui/core/TableBody';\r\nimport TableCell from '@material-ui/core/TableCell';\r\nimport TableContainer from '@material-ui/core/TableContainer';\r\nimport TableHead from '@material-ui/core/TableHead';\r\nimport TableRow from '@material-ui/core/TableRow';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport { connect } from \"react-redux\";\r\nimport { memoizedGetWeatherByDateAndTime } from \"../selectors/WeatherSelectors\";\r\nimport { getWindowDimensions } from '../selectors/UISelectors';\r\nimport { formatHour } from \"../time\";\r\n\r\nconst useStyles = makeStyles({\r\n    table: {\r\n      //height: props => props.height / 3,\r\n    },\r\n    tableContainer: {\r\n        maxHeight: props => props.windowDimensions.height / 2 - props.windowDimensions.headerHeight * 2 - props.marginTop,\r\n        height: props => props.windowDimensions.height / 2 - props.windowDimensions.headerHeight * 2,\r\n        width: props => props.windowDimensions.width - props.windowDimensions.sideBarWidth,\r\n        maxWidth: props => props.windowDimensions.width,\r\n        marginLeft: props => props.windowDimensions.sideBarWidth/2,\r\n    },\r\n    header: {\r\n        position: 'sticky'\r\n    }\r\n  });\r\n\r\nconst TweatherTable = ({ weather, windowDimensions, marginTop }) => {\r\n    const classes = useStyles({windowDimensions: windowDimensions, marginTop: marginTop});\r\n\r\n    return (\r\n        <TableContainer className={classes.tableContainer} component={Paper}>\r\n            <Table stickyHeader className={classes.table} aria-label=\"sticky table\">\r\n                <TableHead>\r\n                    <TableRow>\r\n                        <TableCell>Location</TableCell>\r\n                        <TableCell align=\"right\">Date</TableCell>\r\n                        <TableCell align=\"right\">Time</TableCell>\r\n                        <TableCell align=\"right\">Actual Weather</TableCell>\r\n                        <TableCell align=\"right\">Predicted Weather</TableCell>\r\n                        <TableCell align=\"right\">Number of Tweets</TableCell>\r\n                    </TableRow>\r\n                </TableHead>\r\n                <TableBody>\r\n                    {weather.map((datum) => (\r\n                        <TableRow key={datum.id}>\r\n                            <TableCell component=\"th\" scope=\"row\">{datum.city}</TableCell>\r\n                            <TableCell align=\"right\">{datum.date}</TableCell>\r\n                            <TableCell align=\"right\">{formatHour(datum.hour)}</TableCell>\r\n                            <TableCell align=\"right\">{datum.weather}</TableCell>\r\n                            <TableCell align=\"right\">{datum.predicted_weather}</TableCell>\r\n                            <TableCell align=\"right\">{datum.num_tweets}</TableCell>\r\n                        </TableRow>\r\n                    ))}\r\n                </TableBody>\r\n            </Table>\r\n        </TableContainer>\r\n    )\r\n}\r\n\r\nconst mapStateToProps = (state) => ({\r\n    weather: memoizedGetWeatherByDateAndTime(state),\r\n    windowDimensions: getWindowDimensions(state.ui)\r\n})\r\n\r\nexport default connect(mapStateToProps, null)(TweatherTable);","import React, { useState, useEffect } from 'react';\r\nimport CountryChart from './CountryChart';\r\nimport LocationModal from '../LocationModal';\r\nimport { connect } from \"react-redux\";\r\nimport { getWindowDimensions } from '../../selectors/UISelectors';\r\nimport { setSelectedLocation } from '../Redux/uiSlice';\r\nimport { getSelectedLocationForModal, memoizedGetWeatherByDateAndTime, isWeatherLoading} from \"../../selectors/WeatherSelectors\";\r\nimport CircularProgress from '@material-ui/core/CircularProgress';\r\nimport TweatherTable from '../TweatherTable';\r\n\r\nconst ComparisonChart = ({ date, windowDimensions, weather, loading, geoJson, setSelectedLocation }) => {\r\n    const [showingModal, setShowingModal] = useState(false);\r\n\r\n    if (weather === null || loading || geoJson === null)\r\n    {\r\n        return (\r\n            <div style={{marginTop: windowDimensions.height/2, marginLeft: windowDimensions.width/2}}>\r\n                <CircularProgress/>\r\n            </div>\r\n        )\r\n    }\r\n    return (\r\n    <>\r\n        <div style={{marginTop: windowDimensions.headerHeight, marginLeft: windowDimensions.sideBarWidth}}>\r\n            <div style={{display: 'flex', flexDirection: 'row', justifyContent: 'flex-end'}}>\r\n                <CountryChart \r\n                    height={windowDimensions.height/2} \r\n                    width={windowDimensions.width/2}\r\n                    predicted={true} \r\n                    weatherData={weather}\r\n                    geoJson={geoJson}\r\n                    setSelectedLocation={setSelectedLocation}\r\n                    setShowingModal={setShowingModal}\r\n                />\r\n                <CountryChart \r\n                    height={windowDimensions.height/2} \r\n                    width={windowDimensions.width/2}\r\n                    predicted={false} \r\n                    weatherData={weather}\r\n                    geoJson={geoJson}\r\n                    setSelectedLocation={setSelectedLocation}\r\n                    setShowingModal={setShowingModal}\r\n                />\r\n            </div>\r\n            <p style={{display: 'flex', justifyContent: 'center'}}>\r\n                Weather that is different between actual and predicted marked in red\r\n            </p>\r\n            <TweatherTable marginTop={50}/>\r\n        </div>\r\n        <LocationModal open={showingModal} setShowingModal={setShowingModal}/>\r\n    </>\r\n    )\r\n}\r\n\r\nconst mapStateToProps = (state, ownProps) => ({\r\n    windowDimensions: getWindowDimensions(state.ui),\r\n    weather: memoizedGetWeatherByDateAndTime(state),\r\n    loading: isWeatherLoading(state)\r\n})\r\n\r\nconst mapDispatch = { setSelectedLocation  }\r\n\r\nexport default connect(mapStateToProps, mapDispatch)(ComparisonChart);","import React, { useState } from 'react';\r\nimport CountryChart from './CountryChart';\r\nimport LocationModal from '../LocationModal';\r\nimport { connect } from \"react-redux\";\r\nimport { getWindowDimensions } from '../../selectors/UISelectors';\r\nimport { setSelectedLocation } from '../Redux/uiSlice';\r\nimport { getSelectedLocationForModal, memoizedGetWeatherByDateAndTime, isFetchingDisplay } from \"../../selectors/WeatherSelectors\";\r\nimport CircularProgress from '@material-ui/core/CircularProgress';\r\nimport TweatherTable from '../TweatherTable';\r\n\r\nconst SingleChart = ({ predicted, windowDimensions, weatherData, loading, geoJson, setSelectedLocation }) => {\r\n    const [showingModal, setShowingModal] = useState(false);\r\n\r\n    if (weatherData === null || loading || geoJson === null)\r\n    {\r\n        return (\r\n            <div style={{marginTop: windowDimensions.height/2, marginLeft: windowDimensions.width/2}}>\r\n                <CircularProgress/>\r\n            </div>\r\n        )\r\n    }\r\n    return (\r\n    <>\r\n        <div style={{marginTop: windowDimensions.headerHeight, marginLeft: windowDimensions.sideBarWidth}}>\r\n            <CountryChart \r\n                height={windowDimensions.height/2} \r\n                width={windowDimensions.width/2}\r\n                predicted={predicted} \r\n                weatherData={weatherData}\r\n                geoJson={geoJson}\r\n                setSelectedLocation={setSelectedLocation}\r\n                setShowingModal={setShowingModal}\r\n            />\r\n            <TweatherTable/>\r\n        </div>\r\n        <LocationModal open={showingModal} setShowingModal={setShowingModal}/>\r\n    </>\r\n    )\r\n}\r\n\r\nconst mapStateToProps = (state, ownProps) => ({\r\n    windowDimensions: getWindowDimensions(state.ui),\r\n    weatherData: memoizedGetWeatherByDateAndTime(state),\r\n    loading: isFetchingDisplay(state)\r\n})\r\n\r\nconst mapDispatch = { setSelectedLocation  }\r\n\r\nexport default connect(mapStateToProps, mapDispatch)(SingleChart);","import React from \"react\";\r\nimport { Switch, Route } from \"react-router-dom\";\r\nimport ComparisonChart from \"../Charts/ComparisonChart\";\r\nimport SingleChart from \"../Charts/SingleChart\";\r\n\r\nconst TweatherRouter = ({ geoJson }) => {\r\n    return (\r\n        <main>\r\n            <Switch>\r\n                <Route \r\n                    exact\r\n                    path=\"/weather/comparison/\"\r\n                    render={(props) => <ComparisonChart  geoJson={geoJson}/>}\r\n                />\r\n                <Route\r\n                    exact\r\n                    path=\"/weather/predictions/\"\r\n                    render={(props) => <SingleChart predicted={true} geoJson={geoJson}/>}\r\n                />\r\n                <Route\r\n                    exact\r\n                    path=\"/weather/actual/\"\r\n                    render={(props) => <SingleChart predicted={false} geoJson={geoJson}/>}\r\n                />\r\n                <Route exact path=\"/tweather/\" render={() => <ComparisonChart geoJson={geoJson}/>}/>\r\n\t\t\t\t<Route exact path=\"/\" render={() => <ComparisonChart geoJson={geoJson}/>}/>\r\n            </Switch>\r\n        </main>    \r\n    )\r\n}\r\n\r\nexport default TweatherRouter;","import React, { useEffect, useState } from 'react';\r\nimport CssBaseline from '@material-ui/core/CssBaseline';\r\nimport TweatherHeader from './components/TweatherHeader';\r\nimport LocationModal from './components/LocationModal';\r\nimport { fetchCityWeather, fetchWeather } from './components/Redux/weatherSlice' \r\nimport { connect } from \"react-redux\";\r\nimport { resizeWindow } from './components/Redux/uiSlice';\r\nimport TweatherRouter from \"./components/Routers/TweatherRouter\";\r\nimport { getSelectedDatetime } from \"./selectors/UISelectors\";\r\nimport { getSelectedCity } from \"./selectors/WeatherSelectors\";\r\n\r\nfunction App({ date, hour, selectedCity, fetchWeather, fetchCityWeather, resizeWindow }) {\r\n  const [geoJson, setGeoJson] = useState(null)\r\n  const [showingModal, setShowingModal] = useState(false);\r\n\r\n  useEffect(() => {\r\n    const fetchData = async () => {\r\n        const geojsonResponse = await fetch('https://tweather-api.herokuapp.com/geojson');\r\n        const geojsonJsonResponse = await geojsonResponse.json();\r\n        setGeoJson(geojsonJsonResponse);\r\n    };\r\n  \r\n    fetchData();\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    console.log(\"calling fetch weather\")\r\n    fetchWeather(date, hour)\r\n  }, [date, hour, fetchWeather]);\r\n\r\n  useEffect(() => {\r\n    fetchCityWeather(selectedCity.replace(\", \", \"_\").replace(\" \", \"_\"))\r\n    console.log(\"calling fetch city weather\")\r\n  }, [selectedCity, fetchCityWeather])\r\n  \r\n  useEffect(() => {\r\n    let resized;\r\n\r\n    window.addEventListener('resize', () => {\r\n      clearTimeout(resized);\r\n      resized = setTimeout(() => {\r\n        resizeWindow();\r\n      }, 800)\r\n    });\r\n    return () => window.removeEventListener('resize', resizeWindow);\r\n  }, [resizeWindow]);\r\n\r\n\r\n  return (\r\n    <div>\r\n      <CssBaseline />\r\n      <TweatherHeader/>\r\n      <TweatherRouter geoJson={geoJson}/>\r\n      <LocationModal open={showingModal} setShowingModal={setShowingModal}/>\r\n    </div>\r\n  )\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n  date: getSelectedDatetime(state.ui).date,\r\n  hour: getSelectedDatetime(state.ui).hour,\r\n  selectedCity: getSelectedCity(state)\r\n})\r\n\r\nconst mapDispatch = { fetchWeather, fetchCityWeather, resizeWindow };\r\n\r\nexport default connect(mapStateToProps, mapDispatch)(App);\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import { combineReducers } from 'redux';\r\nimport weatherReducer from \"../components/Redux/weatherSlice\";\r\nimport uiReducer from \"../components/Redux/uiSlice\";\r\n\r\nexport default combineReducers({\r\n    weather: weatherReducer,\r\n    ui: uiReducer,\r\n});","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\nimport rootReducer from \"./reducers\";\r\nimport { configureStore } from '@reduxjs/toolkit'\r\nimport { Provider } from \"react-redux\";\r\nimport { BrowserRouter } from \"react-router-dom\";\r\n\r\nconst store = configureStore({\r\n  reducer: rootReducer\r\n})\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Provider store={store}>\r\n      <BrowserRouter>\r\n        <App />\r\n      </BrowserRouter>\r\n    </Provider>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}